!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=gcc$/;"	m
CC	linux/Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -Wall -O2$/;"	m
CFLAGS	linux/Makefile	/^CFLAGS=-g -Wall -O2$/;"	m
DATALEN	linux/sniffer_op.c	26;"	d	file:
DATALEN	windows/sniffer_op.c	13;"	d	file:
DEFAULT_BUFFER_LEN	sniffer_buffer.c	6;"	d	file:
LIB	Makefile	/^LIB=-ldl -llua -lm -lpthread$/;"	m
LIB	linux/Makefile	/^LIB=-ldl -llua -lm -lpthread$/;"	m
OBJ	Makefile	/^OBJ=${SRC:%.c=%.o}$/;"	m
OBJ	linux/Makefile	/^OBJ=${SRC:%.c=%.o}$/;"	m
SNIFFER_RUNNING	sniffer_main.c	35;"	d	file:
SNIFFER_SHUTDOWN	sniffer_main.c	36;"	d	file:
SNIFFER_STANDBY	sniffer_main.c	34;"	d	file:
SNIFFER_SUSPEND	sniffer_main.c	37;"	d	file:
SRC	Makefile	/^SRC=$(wildcard %.c)$/;"	m
SRC	linux/Makefile	/^SRC=$(wildcard %.c)$/;"	m
__SNIFFER_CONFIG_H__	sniffer_config.h	2;"	d
__SNIFFER_H__	sniffer.h	2;"	d
__SNIFFER_LOG_H__	sniffer_log.h	2;"	d
__SNIFFER_MQ__	sniffer_buffer.h	2;"	d
__SNIFFER_PARSE_H__	sniffer_parse.h	2;"	d
_linux_op_cleanup	linux/sniffer_op.c	/^_linux_op_cleanup(void *handler)$/;"	f	file:
_linux_op_dispatch	linux/sniffer_op.c	/^_linux_op_dispatch(struct sniffer_base *base)$/;"	f	file:
_linux_op_init	linux/sniffer_op.c	/^_linux_op_init(struct sniffer_base *base)$/;"	f	file:
_linux_thread_cleanup	linux/sniffer_thread.c	/^_linux_thread_cleanup(void *arg)$/;"	f	file:
_linux_thread_create	linux/sniffer_thread.c	/^_linux_thread_create(struct sniffer_base *base, void *(*cb)(void *))$/;"	f	file:
_linux_thread_init	linux/sniffer_thread.c	/^_linux_thread_init(struct sniffer_base *base)$/;"	f	file:
_open_libs	sniffer_parse.c	/^_open_libs(lua_State *L)$/;"	f	file:
_proc_icmp	linux/sniffer_op.c	/^_proc_icmp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_icmp	windows/sniffer_op.c	/^_proc_icmp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_igmp	linux/sniffer_op.c	/^_proc_igmp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_igmp	windows/sniffer_op.c	/^_proc_igmp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_ip	linux/sniffer_op.c	/^_proc_ip(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_ip	windows/sniffer_op.c	/^_proc_ip(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_tcp	linux/sniffer_op.c	/^_proc_tcp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_tcp	windows/sniffer_op.c	/^_proc_tcp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_udp	linux/sniffer_op.c	/^_proc_udp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_proc_udp	windows/sniffer_op.c	/^_proc_udp(struct sniffer_base *base, const char *str, int datalen)$/;"	f	file:
_sniffer_base_init	sniffer_main.c	/^_sniffer_base_init()$/;"	f	file:
_sniffer_buffer_expand	sniffer_buffer.c	/^_sniffer_buffer_expand(struct sniffer_buffer *buffer, int ss)$/;"	f	file:
_sniffer_cleanup	sniffer_main.c	/^_sniffer_cleanup(struct sniffer_base *base)$/;"	f	file:
_sniffer_config_new	sniffer_main.c	/^_sniffer_config_new()$/;"	f	file:
_sniffer_loop	sniffer_main.c	/^_sniffer_loop(struct sniffer_base *base)$/;"	f	file:
_sniffer_parse_push	sniffer_parse.c	/^_sniffer_parse_push(lua_State *L)$/;"	f	file:
_traceback	sniffer_parse.c	/^_traceback(lua_State *L)$/;"	f	file:
_windows_op_cleanup	windows/sniffer_op.c	/^_windows_op_cleanup(void *handler)$/;"	f	file:
_windows_op_dispatch	windows/sniffer_op.c	/^_windows_op_dispatch(struct sniffer_base *base)$/;"	f	file:
_windows_op_init	windows/sniffer_op.c	/^_windows_op_init(struct sniffer_base *base)$/;"	f	file:
cfg	sniffer.h	/^	struct sniffer_cfg *cfg;$/;"	m	struct:sniffer_base	typeref:struct:sniffer_base::sniffer_cfg
cleanup	sniffer.h	/^	void (*cleanup)(void *handler);$/;"	m	struct:sniffer_thread
cleanup	sniffer.h	/^	void(*cleanup)(void *handler);$/;"	m	struct:sniffer_op
close_config_file	sniffer_config.c	/^close_config_file()$/;"	f
cond_signal	linux/sniffer_thread.c	24;"	d	file:
cond_wait	linux/sniffer_thread.c	23;"	d	file:
create	sniffer.h	/^	int (*create)(struct sniffer_base *base, void *(*)(void *));$/;"	m	struct:sniffer_thread
cur	sniffer_buffer.h	/^	int cur;	\/* 字符长度 *\/$/;"	m	struct:sniffer_buffer
data	sniffer_buffer.h	/^	char *data;$/;"	m	struct:sniffer_buffer
dispatch	sniffer.h	/^	int(*dispatch)(struct sniffer_base *base);$/;"	m	struct:sniffer_op
fatal	sniffer_log.h	20;"	d
fd	linux/sniffer_op.c	/^	int fd;$/;"	m	struct:op	file:
fd	windows/sniffer_op.c	/^	int fd;$/;"	m	struct:op	file:
fp	sniffer_config.c	/^static FILE *fp = NULL;$/;"	v	file:
g_base	sniffer_main.c	/^static struct sniffer_base *g_base = NULL;$/;"	v	typeref:struct:sniffer_base	file:
get_config	sniffer_config.c	/^get_config(const char *key)$/;"	f
get_config_string	sniffer_config.c	/^get_config_string(const char *key)$/;"	f
handler	linux/sniffer_thread.c	/^struct handler$/;"	s	file:
init	sniffer.h	/^	void *(*init)(struct sniffer_base *base);$/;"	m	struct:sniffer_op
init	sniffer.h	/^	void *(*init)(struct sniffer_base *base);$/;"	m	struct:sniffer_thread
linux_op	linux/sniffer_op.c	/^const struct sniffer_op linux_op = {$/;"	v	typeref:struct:sniffer_op
linux_thread	linux/sniffer_thread.c	/^const struct sniffer_thread linux_thread =$/;"	v	typeref:struct:sniffer_thread
lock	linux/sniffer_thread.c	/^	pthread_mutex_t lock;$/;"	m	struct:handler	file:
lock	linux/sniffer_thread.c	20;"	d	file:
log	sniffer_log.h	25;"	d
log_handler	sniffer.h	/^	FILE *log_handler;$/;"	m	struct:sniffer_base
main	script/parse.lua	/^function main(handler, data, len)$/;"	f
main	sniffer_main.c	/^main(int argc, char *argv[])$/;"	f
now	sniffer_log.c	/^now()$/;"	f
op	linux/sniffer_op.c	/^struct op$/;"	s	file:
op	sniffer.h	/^	const struct sniffer_op *op;$/;"	m	struct:sniffer_base	typeref:struct:sniffer_base::sniffer_op
op	windows/sniffer_op.c	/^struct op$/;"	s	file:
op_handler	sniffer.h	/^	void *op_handler;$/;"	m	struct:sniffer_base
open_config_file	sniffer_config.c	/^open_config_file(const char *path)$/;"	f
ops	sniffer_main.c	/^static const struct sniffer_op *ops[] = {$/;"	v	typeref:struct:sniffer_op	file:
parse_handler	sniffer.h	/^	void *parse_handler;$/;"	m	struct:sniffer_base
parse_lib	sniffer_parse.c	/^static const luaL_Reg parse_lib[] = {$/;"	v	file:
port	sniffer.h	/^	unsigned short port;$/;"	m	struct:sniffer_cfg
ready	linux/sniffer_thread.c	/^	pthread_cond_t ready;$/;"	m	struct:handler	file:
report	sniffer_log.h	16;"	d
sb_cur	sniffer.h	/^	struct sniffer_buffer *sb_cur;$/;"	m	struct:sniffer_base	typeref:struct:sniffer_base::sniffer_buffer
sb_output	sniffer.h	/^	struct sniffer_buffer *sb_output;$/;"	m	struct:sniffer_base	typeref:struct:sniffer_base::sniffer_buffer
sb_recv	sniffer.h	/^	struct sniffer_buffer *sb_recv;$/;"	m	struct:sniffer_base	typeref:struct:sniffer_base::sniffer_buffer
sb_send	sniffer.h	/^	struct sniffer_buffer *sb_send;$/;"	m	struct:sniffer_base	typeref:struct:sniffer_base::sniffer_buffer
sniffer_base	sniffer.h	/^struct sniffer_base$/;"	s
sniffer_buffer	sniffer_buffer.h	/^struct sniffer_buffer$/;"	s
sniffer_buffer_cleanup	sniffer_buffer.c	/^sniffer_buffer_cleanup(struct sniffer_buffer *buffer)$/;"	f
sniffer_buffer_init	sniffer_buffer.c	/^sniffer_buffer_init()$/;"	f
sniffer_buffer_peekup	sniffer_buffer.c	/^sniffer_buffer_peekup(struct sniffer_buffer *buffer)$/;"	f
sniffer_buffer_pop	sniffer_buffer.c	/^sniffer_buffer_pop(struct sniffer_buffer *buffer)$/;"	f
sniffer_buffer_push	sniffer_buffer.c	/^sniffer_buffer_push(struct sniffer_buffer *buffer, const char *data, int ss)$/;"	f
sniffer_buffer_remove	sniffer_buffer.c	/^sniffer_buffer_remove(struct sniffer_buffer *buffer, int ss)$/;"	f
sniffer_buffer_size	sniffer_buffer.c	/^sniffer_buffer_size(struct sniffer_buffer *buffer)$/;"	f
sniffer_cfg	sniffer.h	/^struct sniffer_cfg$/;"	s
sniffer_init	sniffer_main.c	/^sniffer_init()$/;"	f
sniffer_log_cleanup	sniffer_log.c	/^sniffer_log_cleanup(FILE *fp)$/;"	f
sniffer_log_init	sniffer_log.c	/^sniffer_log_init(struct sniffer_base *base)$/;"	f
sniffer_log_report	sniffer_log.c	/^sniffer_log_report(const char *fmt, ...)$/;"	f
sniffer_log_write	sniffer_log.c	/^sniffer_log_write(struct sniffer_base *base, const char *fmt, ...)$/;"	f
sniffer_loop	sniffer_main.c	/^sniffer_loop(struct sniffer_base *base)$/;"	f
sniffer_op	sniffer.h	/^struct sniffer_op$/;"	s
sniffer_parse_cleanup	sniffer_parse.c	/^sniffer_parse_cleanup(void *handler)$/;"	f
sniffer_parse_data	sniffer_parse.c	/^sniffer_parse_data(struct sniffer_base *base, const char *data, size_t ss)$/;"	f
sniffer_parse_init	sniffer_parse.c	/^sniffer_parse_init(struct sniffer_base *base)$/;"	f
sniffer_resume	sniffer_main.c	/^sniffer_resume(struct sniffer_base *base)$/;"	f
sniffer_shutdown	sniffer_main.c	/^sniffer_shutdown(struct sniffer_base *base)$/;"	f
sniffer_suspend	sniffer_main.c	/^sniffer_suspend(struct sniffer_base *base)$/;"	f
sniffer_thread	sniffer.h	/^struct sniffer_thread$/;"	s
status	sniffer.h	/^	int status;$/;"	m	struct:sniffer_base
thread	sniffer.h	/^	const struct sniffer_thread *thread;$/;"	m	struct:sniffer_base	typeref:struct:sniffer_base::sniffer_thread
thread_handler	sniffer.h	/^	void *thread_handler;$/;"	m	struct:sniffer_base
threads	sniffer_main.c	/^static const struct sniffer_thread *threads [] = {$/;"	v	typeref:struct:sniffer_thread	file:
total	sniffer_buffer.h	/^	int total;	\/* 缓冲区长度 *\/$/;"	m	struct:sniffer_buffer
unlock	linux/sniffer_thread.c	21;"	d	file:
windows_op	windows/sniffer_op.c	/^const struct sniffer_op windows_op = {$/;"	v	typeref:struct:sniffer_op
